void FragmentProgram(
    in  float2 fptexCoord0   : TEXCOORD0,
    in  float2 fptexCoord1   : TEXCOORD1,
    in  float2 fptexCoord2   : TEXCOORD2,
    in  float2 fptexCoord3   : TEXCOORD3,
    in  float2 fptexCoord4   : TEXCOORD4,
    out float4 colorO       : COLOR0 ,
    const uniform samplerRECT FPE0: TEXUNIT0 )

{
   // weights for a 4x1 gaussian filter
   // here just one half is shown (its symmetric)
// octave:4> gaussian(16)./sum(gaussian(16))
//ans =

   float4 weights1 = { 
   2.4343e-13,
   2.6696e-10,
   1.0770e-07,
   1.5984e-05 };

   float4 weights2 = { 
   8.7268e-04,
   1.7528e-02,
   1.2952e-01,
   3.5207e-01
  };

   float4 accum = {0.0,0.0,0.0,0.0};
    
   float4 samp1 = texRECT(FPE0,fptexCoord0);
   float4 samp2 = texRECT(FPE0,fptexCoord1);
   float4 samp3 = texRECT(FPE0,fptexCoord2);
   float4 samp4 = texRECT(FPE0,fptexCoord3);
   float4 samp5 = texRECT(FPE0,fptexCoord4);

   accum += weights1.x*samp1;
   accum += weights1.y*float4(samp1.yzw,samp2.x);
   accum += weights1.z*float4(samp1.zw,samp2.xy);
   accum += weights1.w*float4(samp1.w,samp2.xyz);

   accum += weights2.x*samp2;
   accum += weights2.y*float4(samp2.yzw,samp3.x);
   accum += weights2.z*float4(samp2.zw,samp3.xy);
   accum += weights2.w*float4(samp2.w,samp3.xyz);

   accum += weights2.w*samp3;
   accum += weights2.z*float4(samp3.yzw,samp4.x);
   accum += weights2.y*float4(samp3.zw,samp4.xy);
   accum += weights2.x*float4(samp3.w,samp4.xyz);

   accum += weights1.w*samp4;
   accum += weights1.z*float4(samp4.yzw,samp5.x);
   accum += weights1.y*float4(samp4.zw,samp5.xy);
   accum += weights1.x*float4(samp4.w,samp5.xyz);

   colorO = accum;
}

